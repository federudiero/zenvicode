import { initializeApp, getApps } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";

// Usamos tu config pública
const firebaseConfig = {
  apiKey: "AIzaSyDHcDOyUQRxeMNaLmPuZuqcm3ufGVL_AF8",
  authDomain: "zenvicode.firebaseapp.com",
  projectId: "zenvicode",
  storageBucket: "zenvicode.firebasestorage.app",
  messagingSenderId: "668968515945",
  appId: "1:668968515945:web:b0ef81ea7e4e91c71aa5f8",
  measurementId: "G-PMMLNGSS9J",
};

export const app = getApps().length ? getApps()[0] : initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);





"use client";
import { useEffect, useMemo, useState } from "react";
import { onAuthStateChanged, User } from "firebase/auth";
import { doc, getDoc } from "firebase/firestore";
import { auth, db } from "./firebase";

type Estado = "loading" | "yes" | "no";

export function useEsAdmin() {
  const [estado, setEstado] = useState<Estado>("loading");
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const unsub = onAuthStateChanged(auth, async (u) => {
      setUser(u);
      if (!u) {
        setEstado("no");
        return;
      }
      try {
        const snap = await getDoc(doc(db, "usuarios", u.uid));
        const roles = snap.exists() ? (snap.data()?.roles ?? {}) : {};
        setEstado(roles?.admin ? "yes" : "no");
      } catch {
        setEstado("no");
      }
    });
    return () => unsub();
  }, []);

  return useMemo(() => ({ estado, user }), [estado, user]);
}






"use client";
import { useState } from "react";
import { db } from "@/src/lib/firebase";
import { addDoc, collection, serverTimestamp } from "firebase/firestore";

export default function ContactForm() {
  const [sending, setSending] = useState(false);
  const [ok, setOk] = useState<null | boolean>(null);

  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    const fd = new FormData(e.currentTarget);

    // Honeypot (anti-spam): si viene con contenido, abortar
    if ((fd.get("company") as string)?.trim()) {
      setOk(true);
      (e.target as HTMLFormElement).reset();
      return;
    }

    const payload = {
      name: String(fd.get("name") || ""),
      email: String(fd.get("email") || ""),
      phone: String(fd.get("phone") || ""),
      message: String(fd.get("message") || ""),
      source: "web:contact",
      utm: {
        source: (fd.get("utm_source") as string) || undefined,
        medium: (fd.get("utm_medium") as string) || undefined,
        campaign: (fd.get("utm_campaign") as string) || undefined,
      },
      // Campos controlados por reglas
      status: "nuevo",
      priority: "normal",
      assignedTo: null,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
    };

    try {
      setSending(true);
      await addDoc(collection(db, "leads"), payload);
      setOk(true);
      (e.target as HTMLFormElement).reset();
    } catch (err) {
      console.error(err);
      setOk(false);
    } finally {
      setSending(false);
    }
  }

  return (
    <form onSubmit={onSubmit} className="space-y-3">
      {/* Honeypot oculto */}
      <input type="text" name="company" className="hidden" tabIndex={-1} autoComplete="off" />

      <input name="name" required placeholder="Nombre" className="input input-bordered w-full" />
      <input name="email" type="email" placeholder="Email" className="input input-bordered w-full" />
      <input name="phone" placeholder="Teléfono" className="input input-bordered w-full" />
      <textarea name="message" required placeholder="Mensaje" className="textarea textarea-bordered w-full" />
      {/* UTM opcionales */}
      <input type="hidden" name="utm_source" />
      <input type="hidden" name="utm_medium" />
      <input type="hidden" name="utm_campaign" />

      <button className="btn btn-primary" disabled={sending}>
        {sending ? "Enviando..." : "Enviar"}
      </button>

      {ok === true && <p className="text-green-500 text-sm">¡Gracias! Te contactamos pronto.</p>}
      {ok === false && <p className="text-red-500 text-sm">Ups, algo falló. Probá de nuevo.</p>}
    </form>
  );
}




"use client";
import Link from "next/link";
import { useEffect, useRef, useState } from "react";
import { useEsAdmin } from "@/src/lib/useEsAdmin";

export default function HiddenAdminLink({ triggerId = "site-logo" }: { triggerId?: string }) {
  const [visible, setVisible] = useState(false);
  const { estado } = useEsAdmin();
  const buffer = useRef<string>("");

  // Triple click
  useEffect(() => {
    const el = document.getElementById(triggerId);
    if (!el) return;
    let clicks = 0;
    let timer: any = null;
    function onClick() {
      clicks++;
      clearTimeout(timer);
      timer = setTimeout(() => (clicks = 0), 600);
      if (clicks >= 3) {
        clicks = 0;
        if (estado === "yes") setVisible((v) => !v);
      }
    }
    el.addEventListener("click", onClick);
    return () => el.removeEventListener("click", onClick);
  }, [triggerId, estado]);

  // Teclado: "crm"
  useEffect(() => {
    function onKey(e: KeyboardEvent) {
      if (estado !== "yes") return;
      buffer.current += e.key.toLowerCase();
      if (buffer.current.endsWith("crm")) {
        setVisible((v) => !v);
        buffer.current = "";
      }
      if (buffer.current.length > 6) buffer.current = buffer.current.slice(-3);
    }
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [estado]);

  if (!visible || estado !== "yes") return null;

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <Link
        href="/admin/crm"
        className="rounded-2xl border border-white/15 bg-black/60 backdrop-blur px-4 py-2 text-sm hover:bg-black/80"
      >
        Abrir CRM
      </Link>
    </div>
  );
}







"use client";
import { useEffect, useMemo, useState } from "react";
import { useEsAdmin } from "@/src/lib/useEsAdmin";
import { db } from "@/src/lib/firebase";
import {
  collection, doc, getDoc, onSnapshot, orderBy, query, updateDoc
} from "firebase/firestore";
import { auth } from "@/src/lib/firebase";
import { onAuthStateChanged } from "firebase/auth";

type Lead = {
  id: string;
  name: string;
  email?: string;
  phone?: string;
  message: string;
  source?: string;
  utm?: Record<string, string | undefined>;
  status: "nuevo" | "en_progreso" | "cerrado" | "descartado";
  priority: "alta" | "normal" | "baja";
  createdAt?: any;
  updatedAt?: any;
  followUpAt?: any;
  assignedTo?: { uid: string; name: string; email?: string } | null;
  lastNote?: string;
  notes?: { byUid: string; byName: string; text: string; at: any }[];
};

const estados: Lead["status"][] = ["nuevo", "en_progreso", "cerrado", "descartado"];

export default function CRMPage() {
  const { estado } = useEsAdmin();
  const [user, setUser] = useState<any>(null);
  const [leads, setLeads] = useState<Lead[]>([]);
  const [search, setSearch] = useState("");
  const [filterStatus, setFilterStatus] = useState<Lead["status"] | "todos">("todos");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubAuth = onAuthStateChanged(auth, (u) => setUser(u));
    return () => unsubAuth();
  }, []);

  useEffect(() => {
    if (estado !== "yes") return;
    const base = collection(db, "leads");
    const q = query(base, orderBy("createdAt", "desc"));
    const unsub = onSnapshot(q, (snap) => {
      const arr: Lead[] = [];
      snap.forEach((d) => arr.push({ id: d.id, ...(d.data() as any) }));
      setLeads(arr);
      setLoading(false);
    });
    return () => unsub();
  }, [estado]);

  const filtered = useMemo(() => {
    return leads.filter((l) => {
      const okS = filterStatus === "todos" ? true : l.status === filterStatus;
      const txt = [l.name, l.email, l.phone, l.message, l.source]
        .filter(Boolean).join(" ").toLowerCase();
      const okQ = search ? txt.includes(search.toLowerCase()) : true;
      return okS && okQ;
    });
  }, [leads, filterStatus, search]);

  if (estado === "loading") return <div className="p-6">Cargando…</div>;
  if (estado !== "yes") return <div className="p-6">404</div>;

  return (
    <div className="p-6 space-y-4">
      <h1 className="text-xl font-semibold">CRM (Básico)</h1>
      <div className="flex flex-wrap gap-2 items-center">
        <input
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          placeholder="Buscar por texto…"
          className="input input-bordered w-full sm:w-72"
        />
        <select
          value={filterStatus}
          onChange={(e) => setFilterStatus(e.target.value as any)}
          className="select select-bordered"
        >
          <option value="todos">Todos</option>
          {estados.map((s) => (
            <option key={s} value={s}>{s}</option>
          ))}
        </select>
      </div>

      <div className="overflow-x-auto border border-white/10 rounded-xl">
        <table className="table table-zebra">
          <thead>
            <tr>
              <th>Fecha</th>
              <th>Cliente</th>
              <th>Contacto</th>
              <th>Mensaje</th>
              <th>Estado</th>
              <th>Asignado</th>
              <th>Seguimiento</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {loading && <tr><td colSpan={8}>Cargando…</td></tr>}
            {!loading && filtered.length === 0 && <tr><td colSpan={8}>Sin resultados.</td></tr>}
            {filtered.map((l) => (
              <tr key={l.id}>
                <td className="whitespace-nowrap">
                  {l.createdAt?.toDate ? l.createdAt.toDate().toLocaleString() : "-"}
                </td>
                <td>
                  <div className="font-medium">{l.name}</div>
                  <div className="text-xs opacity-70">{l.source ?? "web"}</div>
                </td>
                <td>
                  <div className="text-sm">{l.email || "-"}</div>
                  <div className="text-xs">{l.phone || ""}</div>
                </td>
                <td className="max-w-[320px]">
                  <div className="line-clamp-3">{l.message}</div>
                </td>
                <td>
                  <select
                    className="select select-xs select-bordered"
                    value={l.status}
                    onChange={async (e) => {
                      await updateDoc(doc(db, "leads", l.id), {
                        status: e.target.value,
                        updatedAt: new Date(),
                      });
                    }}
                  >
                    {estados.map((s) => (
                      <option key={s} value={s}>{s}</option>
                    ))}
                  </select>
                </td>
                <td className="min-w-[160px]">
                  <button
                    className="btn btn-xs"
                    onClick={async () => {
                      if (!user) return;
                      const uref = doc(db, "usuarios", user.uid);
                      const us = await getDoc(uref);
                      const profile = us.exists() ? us.data() : { displayName: user.displayName, email: user.email };
                      await updateDoc(doc(db, "leads", l.id), {
                        assignedTo: {
                          uid: user.uid,
                          name: (profile as any)?.displayName ?? "Admin",
                          email: (profile as any)?.email ?? user.email ?? "",
                        },
                        updatedAt: new Date(),
                      });
                    }}
                  >
                    Asignarme
                  </button>
                </td>
                <td className="whitespace-nowrap">
                  <input
                    type="datetime-local"
                    className="input input-xs input-bordered"
                    defaultValue={
                      l.followUpAt?.toDate
                        ? new Date(l.followUpAt.toDate()).toISOString().slice(0, 16)
                        : ""
                    }
                    onBlur={async (e) => {
                      const val = e.target.value;
                      await updateDoc(doc(db, "leads", l.id), {
                        followUpAt: val ? new Date(val) : null,
                        updatedAt: new Date(),
                      });
                    }}
                  />
                </td>
                <td className="text-right">
                  <button
                    className="btn btn-xs"
                    onClick={async () => {
                      const note = prompt("Agregar nota");
                      if (!note || !user) return;
                      const uref = doc(db, "usuarios", user.uid);
                      const us = await getDoc(uref);
                      const profile = us.exists() ? us.data() : { displayName: user.displayName };
                      await updateDoc(doc(db, "leads", l.id), {
                        notes: [
                          ...(l.notes ?? []),
                          {
                            byUid: user.uid,
                            byName: (profile as any)?.displayName ?? "Admin",
                            text: note,
                            at: new Date(),
                          },
                        ],
                        lastNote: note,
                        updatedAt: new Date(),
                      });
                    }}
                  >
                    Nota +
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}




import HiddenAdminLink from "@/src/components/HiddenAdminLink";

export default function SiteLayout({ children }: { children: React.ReactNode }) {
  return (
    <>
      {/* Header con logo */}
      <header className="...">
        <a id="site-logo" href="/" className="...">Zenvicode</a>
        {/* ... */}
      </header>

      {children}

      {/* Acceso oculto */}
      <HiddenAdminLink />
    </>
  );
}






// Opción A: crear leads anónimo, solo admins leen/gestionan
rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function esAdmin(uid) {
      return get(/databases/$(db)/documents/usuarios/$(uid)).data.roles.admin == true;
    }

    function isValidLead(data) {
      return data.name is string && data.name.size() > 0 && data.name.size() <= 120
        && (!('email' in data) || (data.email is string && data.email.size() <= 160))
        && (!('phone' in data) || (data.phone is string && data.phone.size() <= 30))
        && data.message is string && data.message.size() > 0 && data.message.size() <= 2000
        && (!('utm' in data) || data.utm is map)
        // Campos de sistema iniciales (forzados por reglas)
        && data.status == 'nuevo'
        && data.priority == 'normal'
        && data.assignedTo == null
        && !('notes' in data)
        && !('lastNote' in data)
        && !('followUpAt' in data);
    }

    match /leads/{id} {
      // Público puede CREAR solo si cumple el schema
      allow create: if isValidLead(request.resource.data);

      // Solo admins autenticados pueden leer/editar/borrar
      allow read, update, delete: if request.auth != null && esAdmin(request.auth.uid);
    }

    // Usuarios: lectura/gestión de perfiles de admins (opcionalmente restringir a dueño)
    match /usuarios/{uid} {
      allow read: if request.auth != null && request.auth.uid == uid; // cada usuario ve su doc
      // escritura: solo admin global (ajustá a tu necesidad) o desde un panel protegido
      allow write: if request.auth != null && esAdmin(request.auth.uid);
    }
  }
}

